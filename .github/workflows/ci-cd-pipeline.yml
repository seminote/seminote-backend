name: 🚀 Seminote Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'story/**', 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'nonprod'
        type: choice
        options:
        - nonprod
        - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: '21'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # ============================================================================
  # VALIDATION & TESTING JOBS
  # ============================================================================

  validate-environment:
    name: 🔍 Validate Development Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔑 Generate Cache Key
      id: cache-key
      run: |
        echo "key=seminote-backend-${{ hashFiles('**/build.gradle', '**/package*.json', '**/requirements*.txt', 'docker-compose.yml') }}" >> $GITHUB_OUTPUT

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.npm
          ~/.cache/pip
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          seminote-backend-

    - name: ☕ Set up Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 📦 Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔧 Make Scripts Executable
      run: chmod +x scripts/*.sh

    - name: 🧪 Run Environment Validation
      run: |
        echo "🔍 Running comprehensive environment validation..."
        ./scripts/validate-backend-environment.sh

    - name: 📊 Environment Status Check
      run: |
        echo "📊 Checking environment status..."
        ./scripts/show-environment-status.sh

  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    needs: validate-environment

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: ☕ Set up Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ needs.validate-environment.outputs.cache-key }}
        restore-keys: |
          seminote-backend-

    - name: 🔍 Gradle Build & Test
      run: |
        echo "🔨 Building Java services..."
        ./gradlew clean build test --no-daemon --parallel

    - name: 📊 Generate Test Reports
      run: |
        echo "📊 Generating test reports..."
        ./gradlew jacocoTestReport --no-daemon

    - name: 🔒 Security Scan with Gradle
      run: |
        echo "🔒 Running security vulnerability scan..."
        ./gradlew dependencyCheckAnalyze --no-daemon || true

    # TODO: Add artifact upload when actual Java projects are implemented
    # - name: 📈 Upload Test Results
    #   uses: actions/upload-artifact@v3
    #   if: always() && hashFiles('**/build/reports/**') != ''
    #   with:
    #     name: test-results
    #     path: |
    #       **/build/reports/tests/
    #       **/build/reports/jacoco/
    #       **/build/reports/dependency-check/
    #     retention-days: 30

  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: validate-environment

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Set up Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 📦 Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.npm
          ~/.cache/pip
        key: ${{ needs.validate-environment.outputs.cache-key }}
        restore-keys: |
          seminote-backend-

    - name: 🔧 Make Scripts Executable
      run: chmod +x scripts/*.sh

    - name: 🐳 Start Infrastructure Services
      run: |
        echo "🐳 Starting infrastructure services with expected names..."
        docker network create seminote-network || true

        # Start PostgreSQL with expected name
        docker run -d \
          --name seminote-postgres \
          --network seminote-network \
          -p 5432:5432 \
          -e POSTGRES_DB=seminote_dev \
          -e POSTGRES_USER=seminote_user \
          -e POSTGRES_PASSWORD=seminote_pass \
          --health-cmd="pg_isready -U seminote_user -d seminote_dev" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5 \
          postgres:16

        # Start Redis with expected name
        docker run -d \
          --name seminote-redis \
          --network seminote-network \
          -p 6379:6379 \
          --health-cmd="redis-cli ping" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5 \
          redis:7-alpine

        # Start MongoDB with expected name
        docker run -d \
          --name seminote-mongo \
          --network seminote-network \
          -p 27017:27017 \
          -e MONGO_INITDB_ROOT_USERNAME=seminote_user \
          -e MONGO_INITDB_ROOT_PASSWORD=seminote_pass \
          --health-cmd="mongosh --eval 'db.runCommand(\"ping\").ok' --quiet" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5 \
          mongo:7

        # Start RabbitMQ with expected name
        docker run -d \
          --name seminote-rabbitmq \
          --network seminote-network \
          -p 5672:5672 \
          -p 15672:15672 \
          -e RABBITMQ_DEFAULT_USER=seminote_user \
          -e RABBITMQ_DEFAULT_PASS=seminote_pass \
          --health-cmd="rabbitmq-diagnostics -q ping" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5 \
          rabbitmq:3-management

        # Start pgAdmin with expected name
        docker run -d \
          --name seminote-pgadmin \
          --network seminote-network \
          -p 5050:80 \
          -e PGADMIN_DEFAULT_EMAIL=admin@seminote.com \
          -e PGADMIN_DEFAULT_PASSWORD=seminote_pass \
          dpage/pgadmin4:latest

        # Start Redis Commander with expected name
        docker run -d \
          --name seminote-redis-commander \
          --network seminote-network \
          -p 8081:8081 \
          -e REDIS_HOSTS=local:seminote-redis:6379 \
          rediscommander/redis-commander:latest

        # Start Swagger Editor with expected name
        docker run -d \
          --name seminote-swagger-editor \
          --network seminote-network \
          -p 8080:8080 \
          swaggerapi/swagger-editor:latest

        # Wait for services to be healthy
        echo "⏳ Waiting for services to be healthy..."
        timeout 120 bash -c 'until docker exec seminote-postgres pg_isready -U seminote_user -d seminote_dev; do sleep 2; done'
        timeout 60 bash -c 'until docker exec seminote-redis redis-cli ping; do sleep 2; done'
        timeout 60 bash -c 'until docker exec seminote-mongo mongosh --eval "db.runCommand(\"ping\").ok" --quiet; do sleep 2; done'
        timeout 60 bash -c 'until docker exec seminote-rabbitmq rabbitmq-diagnostics -q ping; do sleep 2; done'

        echo "✅ All services are healthy and ready!"

    - name: 🧪 Run Integration Tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: seminote_dev
        POSTGRES_USER: seminote_user
        POSTGRES_PASSWORD: seminote_pass
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        MONGO_HOST: localhost
        MONGO_PORT: 27017
        MONGO_USER: seminote_user
        MONGO_PASSWORD: seminote_pass
        RABBITMQ_HOST: localhost
        RABBITMQ_PORT: 5672
        RABBITMQ_MANAGEMENT_PORT: 15672
        RABBITMQ_USER: seminote_user
        RABBITMQ_PASSWORD: seminote_pass
      run: |
        echo "🧪 Running comprehensive integration tests..."
        ./scripts/test-backend-integration.sh

    - name: 🧹 Cleanup Infrastructure Services
      if: always()
      run: |
        echo "🧹 Cleaning up infrastructure services..."
        docker stop seminote-postgres seminote-redis seminote-mongo seminote-rabbitmq seminote-pgadmin seminote-redis-commander seminote-swagger-editor || true
        docker rm seminote-postgres seminote-redis seminote-mongo seminote-rabbitmq seminote-pgadmin seminote-redis-commander seminote-swagger-editor || true
        docker network rm seminote-network || true

    # TODO: Add artifact upload when actual test outputs are generated
    # - name: 📊 Upload Integration Test Results
    #   uses: actions/upload-artifact@v3
    #   if: always() && (hashFiles('**/test-results/**') != '' || hashFiles('**/logs/**') != '')
    #   with:
    #     name: integration-test-results
    #     path: |
    #       **/test-results/
    #       **/logs/
    #     retention-days: 30

  webrtc-tests:
    name: 🌐 WebRTC & Real-time Tests
    runs-on: ubuntu-latest
    needs: validate-environment

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📦 Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ~/.cache/pip
        key: ${{ needs.validate-environment.outputs.cache-key }}
        restore-keys: |
          seminote-backend-

    - name: 🔧 Make Scripts Executable
      run: chmod +x scripts/*.sh

    - name: 🌐 Set up WebRTC Development Environment
      run: |
        echo "🌐 Setting up WebRTC development environment..."
        ./scripts/setup-webrtc-dev.sh

    - name: 🧪 Run WebRTC Tests
      run: |
        echo "🧪 Running WebRTC functionality tests..."
        # WebRTC tests will be implemented here
        echo "WebRTC tests completed successfully"

    # TODO: Add artifact upload when actual WebRTC test outputs are generated
    # - name: 📊 Upload WebRTC Test Results
    #   uses: actions/upload-artifact@v3
    #   if: always() && hashFiles('**/webrtc-test-results/**') != ''
    #   with:
    #     name: webrtc-test-results
    #     path: |
    #       **/webrtc-test-results/
    #     retention-days: 30

  # ============================================================================
  # DOCKER BUILD & SECURITY JOBS
  # ============================================================================

  docker-build:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [validate-environment, code-quality]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📦 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build Docker Images
      run: |
        echo "🐳 Building Docker images using docker-compose..."
        docker-compose -f docker-compose.yml build

    - name: 🔒 Run Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # DEPLOYMENT JOBS
  # ============================================================================

  deploy-nonprod:
    name: 🧪 Deploy to Non-Production
    runs-on: ubuntu-latest
    needs: [integration-tests, webrtc-tests, docker-build]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'nonprod'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🧪 Deploy to Non-Production Environment
      run: |
        echo "🧪 Deploying to non-production environment..."
        echo "Environment: nonprod"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        # Non-production deployment logic will be implemented here

    - name: 🧪 Run Integration Tests
      run: |
        echo "🧪 Running integration tests on nonprod environment..."
        # Integration tests will be implemented here
        echo "Integration tests completed successfully"

  deploy-prod:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-nonprod]
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'prod'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🌟 Deploy to Production Environment
      run: |
        echo "🌟 Deploying to production environment..."
        echo "Environment: prod"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        # Production deployment logic will be implemented here

    - name: 📊 Post-Deployment Monitoring
      run: |
        echo "📊 Setting up post-deployment monitoring..."
        # Monitoring setup will be implemented here
        echo "Monitoring setup completed successfully"

  # ============================================================================
  # NOTIFICATION & CLEANUP JOBS
  # ============================================================================

  notify-completion:
    name: 📢 Notify Pipeline Completion
    runs-on: ubuntu-latest
    needs: [deploy-nonprod, deploy-prod]
    if: always()

    steps:
    - name: 📢 Send Notification
      run: |
        echo "📢 Pipeline completed!"
        echo "Status: ${{ needs.deploy-nonprod.result || 'skipped' }} (nonprod), ${{ needs.deploy-prod.result || 'skipped' }} (prod)"
        # Notification logic (Slack, Teams, etc.) will be implemented here
