plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1' apply false
    id 'io.spring.dependency-management' version '1.1.7' apply false
    id 'org.sonarqube' version '6.0.1.5171'
    id 'checkstyle'
    id 'jacoco'
}

allprojects {
    group = 'com.seminote'
    version = '0.1.0-SNAPSHOT'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    // Only apply Spring Boot to service modules, not shared libraries
    if (!project.path.startsWith(':shared')) {
        apply plugin: 'org.springframework.boot'
        apply plugin: 'io.spring.dependency-management'
    } else {
        apply plugin: 'io.spring.dependency-management'
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        // Different dependencies for services vs shared libraries
        if (!project.path.startsWith(':shared')) {
            // Spring Boot Starters for services
            implementation 'org.springframework.boot:spring-boot-starter'
            implementation 'org.springframework.boot:spring-boot-starter-web'
            implementation 'org.springframework.boot:spring-boot-starter-actuator'
            implementation 'org.springframework.boot:spring-boot-starter-validation'

            // Development Tools
            developmentOnly 'org.springframework.boot:spring-boot-devtools'
            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

            // Testing
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
            testImplementation 'org.testcontainers:junit-jupiter'
            testImplementation 'org.testcontainers:postgresql'
            testImplementation 'org.testcontainers:testcontainers'
        } else {
            // Minimal dependencies for shared libraries
            testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
            testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
        }
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2024.0.0'
            mavenBom 'org.testcontainers:testcontainers-bom:1.20.4'
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    checkstyle {
        toolVersion = '10.21.0'
        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    }

    jacoco {
        toolVersion = "0.8.12"
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
        finalizedBy jacocoTestCoverageVerification
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.60
                }
            }
        }
    }

    test {
        finalizedBy jacocoTestReport
    }
}

// SonarQube configuration
sonarqube {
    properties {
        property "sonar.projectName", "Seminote Backend Services"
        property "sonar.projectKey", "seminote-backend"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.coverage.jacoco.xmlReportPaths", "**/build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

// Wrapper task
wrapper {
    gradleVersion = '8.14.1'
    distributionType = Wrapper.DistributionType.BIN
}
