plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'org.sonarqube' version '4.4.1.3373'
    id 'checkstyle'
}

allprojects {
    group = 'com.seminote'
    version = '0.1.0-SNAPSHOT'
    
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'checkstyle'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        // Spring Boot Starters
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        
        // Development Tools
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        
        // Testing
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:postgresql'
        testImplementation 'org.testcontainers:redis'
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.0'
            mavenBom 'org.testcontainers:testcontainers-bom:1.19.3'
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    checkstyle {
        toolVersion = '10.12.5'
        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    }
}

// SonarQube configuration
sonarqube {
    properties {
        property "sonar.projectName", "Seminote Backend Services"
        property "sonar.projectKey", "seminote-backend"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.coverage.jacoco.xmlReportPaths", "**/build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

// Wrapper task
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}
