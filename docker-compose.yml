version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:16
    container_name: seminote-postgres
    environment:
      POSTGRES_DB: seminote_dev
      POSTGRES_USER: seminote_user
      POSTGRES_PASSWORD: seminote_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seminote_user -d seminote_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - seminote-network

  redis:
    image: redis:7.4-alpine
    container_name: seminote-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - seminote-network

  # MongoDB for Content Service
  mongodb:
    image: mongo:7
    container_name: seminote-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: seminote_user
      MONGO_INITDB_ROOT_PASSWORD: seminote_pass
      MONGO_INITDB_DATABASE: seminote_content
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - seminote-network

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: seminote-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: seminote_user
      RABBITMQ_DEFAULT_PASS: seminote_pass
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - seminote-network

  # Database Management Tools
  pgadmin:
    image: dpage/pgadmin4
    container_name: seminote-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@seminote.com
      PGADMIN_DEFAULT_PASSWORD: seminote_pass
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - seminote-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: seminote-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - seminote-network

  # Swagger Editor for API Development
  swagger-editor:
    image: swaggerapi/swagger-editor
    container_name: seminote-swagger-editor
    ports:
      - "8080:8080"
    networks:
      - seminote-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v3.1.1
    container_name: seminote-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - seminote-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:11.5.0
    container_name: seminote-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - seminote-network
    profiles:
      - monitoring

  # Application Services (will be added as they're developed)
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: seminote-api-gateway
    ports:
      - "8090:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/seminote
      SPRING_REDIS_HOST: redis
    depends_on:
      - postgres
      - redis
    networks:
      - seminote-network
    profiles:
      - services

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: seminote-user-service
    ports:
      - "8091:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/seminote
      SPRING_REDIS_HOST: redis
    depends_on:
      - postgres
      - redis
    networks:
      - seminote-network
    profiles:
      - services

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  rabbitmq_data:
  pgadmin_data:
  grafana_data:

networks:
  seminote-network:
    driver: bridge
